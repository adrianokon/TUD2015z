package service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import domain.Tournament;

public class TournamentManager {

   private Connection        conn;
   private Statement         statement;
   private PreparedStatement getAllTournaments;
   private PreparedStatement deleteAllTournaments;
   private PreparedStatement addTournament;

   public TournamentManager() {
      try {
         // łączenie się z bazą
         conn = DriverManager.getConnection("jdbc:hsqldb:file:/tmp/testdb;ifexists=false", "SA", "");
         statement = conn.createStatement();
         // szukanie tabeli o nazwie "Tournament"
         ResultSet rs = conn.getMetaData().getTables(null, null, null, null);
         boolean tableExists = false;
         while (rs.next()) {
            if ("Tournament".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
               tableExists = true;
               break;
            }
         }
         // tworzymy tabelę, jeśli nie istnieje
         if (!tableExists)
            statement.executeUpdate(//
            "CREATE TABLE Tournament(" + //
                  "id bigint GENERATED BY DEFAULT AS IDENTITY," + //
                  "place varchar(30)," + //
                  "entry_fee double," + //
                  "win double," + //
                  "place_id bigint" + //
                  ")");
         getAllTournaments = conn.prepareStatement("SELECT id, place, entry_fee, win, place_id FROM Tournament");
         deleteAllTournaments = conn.prepareStatement("DELETE FROM Tournament");
         addTournament = conn.prepareStatement("INSERT INTO Tournament(place, entry_fee, win, place_id) VALUES( ?, ?, ?, ?)");
      } catch (SQLException e) {
         e.printStackTrace();
      }
   }

   public void addTournament(Tournament t) {
      try {
         addTournament.setString(1, t.getPlace());
         addTournament.setDouble(2, t.getEntry_fee());
         addTournament.setDouble(3, t.getWin());
         addTournament.setLong(4, t.getPlace_id());
         addTournament.executeUpdate();
      } catch (SQLException e) {
         e.printStackTrace();
      }
   }

   public List<Tournament> getAllTournaments() {
      List<Tournament> tournamentsList = new ArrayList<Tournament>();
      try {
         ResultSet rs = getAllTournaments.executeQuery();
         while (rs.next()) {
            Tournament t = new Tournament();
            t.setId(rs.getLong("id"));
            t.setPlace(rs.getString("place"));
            t.setEntry_fee(rs.getDouble("entry_fee"));
            t.setWin(rs.getDouble("win"));
            t.setPlace_id(rs.getLong("place_id"));
            tournamentsList.add(t);
         }
      } catch (SQLException e) {
         e.printStackTrace();
      }
      return tournamentsList;
   }

   public void deleteAllTournaments() {
      try {
         // executeUpdate, bo przeprowadzamy zmiany w bazie
         deleteAllTournaments.executeUpdate();
      } catch (SQLException e) {
         e.printStackTrace();
      }
   }
}
