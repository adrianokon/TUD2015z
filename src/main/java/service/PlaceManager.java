package service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import domain.Place;

public class PlaceManager {

   private Connection        conn;
   private Statement         statement;
   private PreparedStatement getAllPlaces;
   private PreparedStatement deleteAllPlaces;
   private PreparedStatement addPlace;
   private PreparedStatement getPlaceById;
   private PreparedStatement deletePlaceById;

   public PlaceManager() {
      try {
         // łączenie się z bazą
         conn = DriverManager.getConnection("jdbc:hsqldb:file:/tmp/testdb;ifexists=false", "SA", "");
         statement = conn.createStatement();
         // szukanie tabeli o nazwie "Place"
         ResultSet rs = conn.getMetaData().getTables(null, null, null, null);
         boolean tableExists = false;
         while (rs.next()) {
            if ("Place".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
               tableExists = true;
               break;
            }
         }
         // tworzymy tabelę, jeśli nie istnieje
         if (!tableExists)
            statement.executeUpdate(//
            "CREATE TABLE Place(" + //
                  "id bigint GENERATED BY DEFAULT AS IDENTITY," + //
                  "country varchar(30)," + //
                  "city varchar(30)," + //
                  "name varchar(30)" + //
                  ")");
         getAllPlaces = conn.prepareStatement("SELECT id, country, city, name FROM Place");
         getPlaceById = conn.prepareStatement("SELECT id, country, city, name FROM Place WHERE id = ?");
         deletePlaceById = conn.prepareStatement("DELETE FROM Place WHERE id = ?");
         deleteAllPlaces = conn.prepareStatement("DELETE FROM Place");
         addPlace = conn.prepareStatement("INSERT INTO Place(country, city, name) VALUES(?, ?, ?)");
      } catch (SQLException e) {
         e.printStackTrace();
      }
   }

   public Place getPlaceById(long id) {
      try {
         getPlaceById.setLong(1, id);
         ResultSet rs = getPlaceById.executeQuery();
         if (rs.next()) {
            Place p = new Place();
            p.setId(rs.getLong("id"));
            p.setCountry(rs.getString("country"));
            p.setCity(rs.getString("city"));
            p.setCountry(rs.getString("country"));
            return p;
         } else {
            return null;
         }
      } catch (SQLException e) {
         e.printStackTrace();
         return null;
      }
   }

   public void deletePlaceById(long id) {
      try {
         deletePlaceById.setLong(1, id);
         deletePlaceById.executeUpdate();
      } catch (SQLException e) {
         e.printStackTrace();
      }
   }

   public void addPlace(Place p) {
      try {
         addPlace.setString(1, p.getCountry());
         addPlace.setString(2, p.getCity());
         addPlace.setString(3, p.getName());
         addPlace.executeUpdate();
      } catch (SQLException e) {
         e.printStackTrace();
      }
   }

   public List<Place> getAllPlaces() {
      List<Place> placesList = new ArrayList<Place>();
      try {
         ResultSet rs = getAllPlaces.executeQuery();
         while (rs.next()) {
            Place p = new Place();
            p.setId(rs.getLong("id"));
            p.setCountry(rs.getString("country"));
            p.setCity(rs.getString("city"));
            p.setName(rs.getString("name"));
            placesList.add(p);
         }
      } catch (SQLException e) {
         e.printStackTrace();
      }
      return placesList;
   }

   public void deleteAllPlaces() {
      try {
         // executeUpdate, bo przeprowadzamy zmiany w bazie
         deleteAllPlaces.executeUpdate();
      } catch (SQLException e) {
         e.printStackTrace();
      }
   }
}
